public class Merge {
    public static void main(String[] args) {
        int[] arr = new int[]{ 9,3,2,5,1,7};
        int len = arr.length;
        Merge.merge_sort(arr, len);
        for(int i = 0; i < arr.length; i++){
            System.out.print(arr[i] + " ");
        }

    }

    static void merge(int[] arr,int low,int mid , int high){
        
        int l1 = mid - low + 1;
        int l2 = high - mid;
        int[] left = new int[l1];
        int[] right = new int[l2];
        for(int i = 0; i < l1; ++i){
            left[i] = arr[low + i]; 
        }
        for(int i = 0; i < l2; ++i){
            right[i] = arr[mid + i + 1];
        }
        int k = low, i = 0, j = 0;
        while ( i < l1 && j < l2){
            if ( left[i] <= right[j]){
                arr[k] = left[i];
                i++;
            }
            else{
                arr[k] = right[j];
                j++;
            }k++;
        }
        while( i < l1){
            arr[k] = left[i];
            k++;
            i++;
        }
        while ( j < l2){
            arr[k] = right[j];
            k++;
            j++;
        }
    }

    static void mergeSort(int[] arr, int low, int high){
        if ( high > low){
            int mid = low + (high - low) / 2;
            mergeSort(arr, low, mid);
            mergeSort(arr, mid + 1, high);
            Merge.merge(arr, low, mid, high);
        }
    }
    static void merge_sort(int[] arr, int n){
        int low = 0 ;
        int high = n - 1;
        Merge.mergeSort(arr, low, high);
    }
}
